import heapq

def misplaced_tiles(state, goal):

    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal[i][j]:
                count += 1
    return count

def get_neighbors(state):
  
    neighbors = []
    # Find blank (0) position
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                x, y = i, j
                
    directions = [(-1,0),(1,0),(0,-1),(0,1)]  # up, down, left, right
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            # Swap blank and neighbor tile
            new_state = [list(row) for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(tuple(tuple(row) for row in new_state))
    return neighbors

def a_star(start_state, goal_state):
 
    open_set = []
    heapq.heappush(open_set, (misplaced_tiles(start_state, goal_state), 0, start_state, []))  
    # Elements: (f = g + h, g = cost so far, state, path)
    
    closed_set = set()

    while open_set:
        f, g, current, path = heapq.heappop(open_set)

        if current == goal_state:
            return path + [current]

        if current in closed_set:
            continue
        closed_set.add(current)

        for neighbor in get_neighbors(current):
            if neighbor not in closed_set:
                new_g = g + 1
                new_f = new_g + misplaced_tiles(neighbor, goal_state)
                heapq.heappush(open_set, (new_f, new_g, neighbor, path + [current]))
    return None

def get_user_state(prompt):
    print(prompt)
    print("Enter 9 numbers separated by space, use 0 for blank tile (e.g. '2 8 3 1 6 4 7 0 5'):")
    while True:
        try:
            entries = list(map(int, input().strip().split()))
            if len(entries) != 9 or set(entries) != set(range(9)):
                raise ValueError
            break
        except ValueError:
            print("Invalid input! Enter exactly 9 unique digits from 0 to 8 separated by spaces.")
    return tuple(tuple(entries[i*3:(i+1)*3]) for i in range(3))

def print_state(state):
    for row in state:
        print(' '.join(str(x) if x != 0 else ' ' for x in row))
    print()

if __name__ == "__main__":
    start = get_user_state("Enter the START state:")
    goal = get_user_state("Enter the GOAL state:")
    
    print("\nSolving...\n")
    solution = a_star(start, goal)
    
    if solution:
        print(f"Solution found in {len(solution)-1} moves:\n")
        for step_num, step in enumerate(solution):
            print(f"Step {step_num}:")
            print_state(step)
    else:
        print("No solution found.")
