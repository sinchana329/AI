print("sinchana 1bm23cs329")
from collections import deque

# Directions: Up, Down, Left, Right
DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def to_matrix(state_list):
    return [state_list[i:i+3] for i in range(0, 9, 3)]

def state_to_tuple(state):
    return tuple(num for row in state for num in row)

def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
    return -1, -1

def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3

def swap(state, x1, y1, x2, y2):
    new_state = [row[:] for row in state]
    new_state[x1][y1], new_state[x2][y2] = new_state[x2][y2], new_state[x1][y1]
    return new_state

def print_state(state_tuple):
    for i in range(0, 9, 3):
        row = state_tuple[i:i+3]
        print(" ".join(str(x) if x != 0 else " " for x in row))

def print_path(parent, start_tuple, goal_tuple):
    path = []
    current = goal_tuple
    while current is not None:
        path.append(current)
        current = parent[current]
    path.reverse()
    print("🧩 Solution Path:")
    for state in path:
        print_state(state)
        print()

def read_state(prompt):
    while True:
        try:
            nums = list(map(int, input(prompt).strip().split()))
            if len(nums) != 9 or sorted(nums) != list(range(9)):
                raise ValueError
            return to_matrix(nums)
        except ValueError:
            print("❗ Invalid input. Enter 9 numbers (0-8) with no duplicates.")

def dls(state, goal_tuple, depth_limit, visited, parent, depth=0):
    state_tuple = state_to_tuple(state)
    if state_tuple == goal_tuple:
        return True

    if depth == depth_limit:
        return False

    x, y = find_zero(state)

    for dx, dy in DIRECTIONS:
        nx, ny = x + dx, y + dy
        if is_valid(nx, ny):
            new_state = swap(state, x, y, nx, ny)
            new_tuple = state_to_tuple(new_state)
            if new_tuple not in visited:
                visited.add(new_tuple)
                parent[new_tuple] = state_tuple
                if dls(new_state, goal_tuple, depth_limit, visited, parent, depth+1):
                    return True
                # If not found, backtrack:
                # Not removing from visited to avoid revisiting
    return False

def iddfs(start_state, goal_state, max_depth=50):
    start_tuple = state_to_tuple(start_state)
    goal_tuple = state_to_tuple(goal_state)

    for depth_limit in range(max_depth+1):
        print(f"🔍 Searching with depth limit: {depth_limit}")
        visited = set([start_tuple])
        parent = {start_tuple: None}
        found = dls(start_state, goal_tuple, depth_limit, visited, parent)
        if found:
            print(f"\n✅ Goal found at depth {depth_limit}")
            print_path(parent, start_tuple, goal_tuple)
            return
    print("❌ No solution found within max depth limit.")

if __name__ == "__main__":
    print("🧩 8 Puzzle Solver using Iterative Deepening DFS (IDDFS)\n")
    print("Enter the initial state (0 for blank):")
    start_state = read_state("Initial (e.g., 1 2 3 4 7 6 5 8 0): ")

    print("\nEnter the goal state:")
    goal_state = read_state("Goal (e.g., 1 2 3 4 5 6 7 8 0): ")

    iddfs(start_state, goal_state, max_depth=30)
